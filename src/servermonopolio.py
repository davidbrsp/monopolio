#!/usr/bin/python

import urllib.request
import json
import http.server
import socketserver
import Monopolio as mp
from urllib.parse import urlparse
from urllib.parse import parse_qs import FrontMonopolio as fm


class MyHttpRequestHandler(http.server.SimpleHTTPRequestHandler):
    def do_HEAD(self):
        self.send_response(200)
        self.send_header('Content-type', 'text/html')
        self.end_headers()

    def do_GET(self):
        mmp = mp.Monopolio()
        ffm = fm.FrontMonopolio(mmp.simulacao_dict)
        if self.path.endswith('/text'):
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            # str_url = 'http://localhost:8000/api/monopolio'
            # try:
            # url = urllib.request.urlopen(str_url)
            # except as ex:
            #     print(ex)
            # with urllib.request.urlopen(str_url) as url:
            #     ffm.simulacao_dict = json.loads(url.read().decode())
            #     # print(data)
            # ffm.simulacao_dict = json.loads(url.read())
            # ffm.to_text()
            self.wfile.write(bytes(mmp.text_str, 'utf8'))
            # self.wfile.write(bytes(ffm.text_str, 'utf8'))
        elif self.path.endswith('/api/monopolio'):
            self.send_response(200)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            query_components = parse_qs(urlparse(self.path).query)
            if 'ms' in query_components:
                mmp.max_simulacoes = query_components['ms'][0]
            if 'ndc' in query_components:
                mmp.numero_de_casas = query_components['ndc'][0]
            if 'mr' in query_components:
                mmp.max_rodadas = query_components['mr'][0]
            if 'mv' in query_components:
                mmp.max_venda = query_components['mv'][0]
            if 'pmv' in query_components:
                mmp.porcentagem_min_venda = query_components['pmv'][0]
            if 'pa' in query_components:
                mmp.porcentagem_aluguel = query_components['pa'][0]
            mmp.simulacao()
            # ffm.to_text()
            self.wfile.write(bytes(json.dumps(mmp.simulacao_dict), 'utf8'))
            # self.wfile.write(bytes(ffm.text_str, 'utf8'))
        elif self.path.endswith('/'):
            # else:
            self.send_response(200)
            # Setting the header
            self.send_header("Content-type", "text/html")
            # Whenever using 'send_header', you also have to call 'end_headers'
            self.end_headers()
            # Extract query param
            # name = 'World'
            query_components = parse_qs(urlparse(self.path).query)

            # for i in query_components:
            #     for j in
            #     if 'name' in query_components:
            #         name = query_components["name"][0]

            # if 'name' in query_components:
            #     name = query_components["name"][0]
            # if 'max_simulacoes' in query_components:
            #     max_simulacoes = query_components['max_simulacoes'][0]
            # if 'numero_de_casas' in query_components:
            #     numero_de_casas = query_components['numero_de_casas'][0]
            # Some custom HTML code, possibly generated by another function
            # html = f"<html><head></head><body><h1>Hello {name}!</h1></body></html>"
            # html = f"{name}"
            # html = f"{mp.main()}"
            # str_simulacao = mp.simulacao()
            # str_simulacao = mp.simulacao(
            #     max_simulacoes, numero_de_casas, max_rodadas, max_venda, porcentagem_min_venda,
            #     porcentagem_aluguel)
            # str_simulacao = str_simulacao.replace('\n', '<br>')


            # print(mp)
            # mmp = mp.Monopolio()
            html = f"<html><head></head><body><pre> {ffm.html_str} </pre></body></html>"
            # html = f"<html><head></head><body> {str_simulacao} </body></html>"
            # Writing the HTML contents with UTF-8
            self.wfile.write(bytes(html, "utf8"))
        return


# Create an object of the above class
handler_object = MyHttpRequestHandler
PORT = 8000
my_server = socketserver.TCPServer(("", PORT), handler_object)
print(f"Servidor iniciado: http://localhost:{PORT}/")
# Start server
my_server.serve_forever()
